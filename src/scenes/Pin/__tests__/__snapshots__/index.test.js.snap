// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pin Scene Should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PinScene
    context={
      Object {
        "publicKey": "1234567890",
      }
    }
    navigation={
      Object {
        "addListener": [MockFunction] {
          "calls": Array [
            Array [
              "didFocus",
              [Function],
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": [MockFunction],
            },
          ],
        },
        "getParam": [MockFunction] {
          "calls": Array [
            Array [
              "shouldGoBack",
              false,
            ],
            Array [
              "shouldDoubleCheck",
              false,
            ],
            Array [
              "onSuccess",
            ],
            Array [
              "shouldGoBack",
              false,
            ],
            Array [
              "shouldDoubleCheck",
              false,
            ],
            Array [
              "shouldGoBack",
              false,
            ],
            Array [
              "shouldDoubleCheck",
              false,
            ],
            Array [
              "shouldGoBack",
              false,
            ],
            Array [
              "shouldDoubleCheck",
              false,
            ],
            Array [
              "shouldGoBack",
              false,
            ],
            Array [
              "shouldDoubleCheck",
              false,
            ],
            Array [
              "shouldGoBack",
              false,
            ],
            Array [
              "shouldDoubleCheck",
              false,
            ],
            Array [
              "shouldGoBack",
              false,
            ],
            Array [
              "shouldDoubleCheck",
              false,
            ],
            Array [
              "shouldGoBack",
              false,
            ],
            Array [
              "shouldDoubleCheck",
              false,
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            Object {
              "isThrow": false,
              "value": [MockFunction] {
                "calls": Array [
                  Array [
                    "123456",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
          ],
        },
        "state": Object {
          "onSuccess": [MockFunction],
          "testInput": [MockFunction],
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "background": "#191A2A",
      "children": <Styled(View)
        align="stretch"
        justify="flex-start"
      >
        <Styled(Styled(View))
          flex={1}
          paddingSize="large"
        >
          <GoBackButton
            onPress={[Function]}
          />
          <Styled(View)
            align="center"
            justify="flex-start"
          >
            <Styled(Text)>
              SECURITY CHECK
            </Styled(Text)>
            <Styled(View)
              size="small"
            />
            <Styled(Text)>
              Enter New PIN
            </Styled(Text)>
          </Styled(View)>
        </Styled(Styled(View))>
        <PinPad
          onComplete={[Function]}
        />
        <Styled(View)
          align="center"
          flex={0.4}
          justify="center"
          paddingY="medium"
        />
      </Styled(View)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "align": "stretch",
        "children": Array [
          <Styled(Styled(View))
            flex={1}
            paddingSize="large"
          >
            <GoBackButton
              onPress={[Function]}
            />
            <Styled(View)
              align="center"
              justify="flex-start"
            >
              <Styled(Text)>
                SECURITY CHECK
              </Styled(Text)>
              <Styled(View)
                size="small"
              />
              <Styled(Text)>
                Enter New PIN
              </Styled(Text)>
            </Styled(View)>
          </Styled(Styled(View))>,
          <PinPad
            onComplete={[Function]}
          />,
          <Styled(View)
            align="center"
            flex={0.4}
            justify="center"
            paddingY="medium"
          />,
        ],
        "justify": "flex-start",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              false,
              <GoBackButton
                onPress={[Function]}
              />,
              <Styled(View)
                align="center"
                justify="flex-start"
              >
                <Styled(Text)>
                  SECURITY CHECK
                </Styled(Text)>
                <Styled(View)
                  size="small"
                />
                <Styled(Text)>
                  Enter New PIN
                </Styled(Text)>
              </Styled(View)>,
            ],
            "flex": 1,
            "paddingSize": "large",
          },
          "ref": null,
          "rendered": Array [
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "onPress": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "align": "center",
                "children": Array [
                  <Styled(Text)>
                    SECURITY CHECK
                  </Styled(Text)>,
                  <Styled(View)
                    size="small"
                  />,
                  <Styled(Text)>
                    Enter New PIN
                  </Styled(Text)>,
                ],
                "justify": "flex-start",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "SECURITY CHECK",
                  },
                  "ref": null,
                  "rendered": "SECURITY CHECK",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "size": "small",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Enter New PIN",
                  },
                  "ref": null,
                  "rendered": "Enter New PIN",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onComplete": [Function],
          },
          "ref": [Function],
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "align": "center",
            "children": null,
            "flex": 0.4,
            "justify": "center",
            "paddingY": "medium",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "background": "#191A2A",
        "children": <Styled(View)
          align="stretch"
          justify="flex-start"
        >
          <Styled(Styled(View))
            flex={1}
            paddingSize="large"
          >
            <GoBackButton
              onPress={[Function]}
            />
            <Styled(View)
              align="center"
              justify="flex-start"
            >
              <Styled(Text)>
                SECURITY CHECK
              </Styled(Text)>
              <Styled(View)
                size="small"
              />
              <Styled(Text)>
                Enter New PIN
              </Styled(Text)>
            </Styled(View)>
          </Styled(Styled(View))>
          <PinPad
            onComplete={[Function]}
          />
          <Styled(View)
            align="center"
            flex={0.4}
            justify="center"
            paddingY="medium"
          />
        </Styled(View)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "align": "stretch",
          "children": Array [
            <Styled(Styled(View))
              flex={1}
              paddingSize="large"
            >
              <GoBackButton
                onPress={[Function]}
              />
              <Styled(View)
                align="center"
                justify="flex-start"
              >
                <Styled(Text)>
                  SECURITY CHECK
                </Styled(Text)>
                <Styled(View)
                  size="small"
                />
                <Styled(Text)>
                  Enter New PIN
                </Styled(Text)>
              </Styled(View)>
            </Styled(Styled(View))>,
            <PinPad
              onComplete={[Function]}
            />,
            <Styled(View)
              align="center"
              flex={0.4}
              justify="center"
              paddingY="medium"
            />,
          ],
          "justify": "flex-start",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                false,
                <GoBackButton
                  onPress={[Function]}
                />,
                <Styled(View)
                  align="center"
                  justify="flex-start"
                >
                  <Styled(Text)>
                    SECURITY CHECK
                  </Styled(Text)>
                  <Styled(View)
                    size="small"
                  />
                  <Styled(Text)>
                    Enter New PIN
                  </Styled(Text)>
                </Styled(View)>,
              ],
              "flex": 1,
              "paddingSize": "large",
            },
            "ref": null,
            "rendered": Array [
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "onPress": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "align": "center",
                  "children": Array [
                    <Styled(Text)>
                      SECURITY CHECK
                    </Styled(Text)>,
                    <Styled(View)
                      size="small"
                    />,
                    <Styled(Text)>
                      Enter New PIN
                    </Styled(Text)>,
                  ],
                  "justify": "flex-start",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "SECURITY CHECK",
                    },
                    "ref": null,
                    "rendered": "SECURITY CHECK",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "size": "small",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Enter New PIN",
                    },
                    "ref": null,
                    "rendered": "Enter New PIN",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "onComplete": [Function],
            },
            "ref": [Function],
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": null,
              "flex": 0.4,
              "justify": "center",
              "paddingY": "medium",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenThreeAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
